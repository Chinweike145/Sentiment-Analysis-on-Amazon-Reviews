{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c9d18957-3392-4b9c-a232-cc2b4d91b30c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files combined and saved as 'total.csv'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the train and validation CSV files\n",
    "train_df = pd.read_csv('train.csv')\n",
    "val_df = pd.read_csv('val.csv')\n",
    "\n",
    "# Combine the dataframes\n",
    "total_df = pd.concat([train_df, val_df], ignore_index=True)\n",
    "\n",
    "# Save the combined dataframe to total.csv\n",
    "total_df.to_csv('total.csv', index=False)\n",
    "\n",
    "print(\"Files combined and saved as 'total.csv'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d1ff0407-0d44-49ac-b157-5494e9c8e5db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(18000, 2)\n"
     ]
    }
   ],
   "source": [
    "# Load the reduced CSV file\n",
    "df = pd.read_csv(\"total.csv\")\n",
    "\n",
    "# Check the shape of the DataFrame\n",
    "print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "03e20b9d-f116-44ce-9c49-b2ad3be055fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e8124588-06cd-4ba2-982e-aadc0a79c833",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the combined CSV file\n",
    "total_df = pd.read_csv('total.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fc758ea7-4510-4f96-965a-705e238acfbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the data distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.countplot(data=total_df, x='Reaction')  # Replace 'label' with the actual column name representing emotions\n",
    "plt.title('Distribution of Emotion Labels in Total Dataset')\n",
    "plt.xlabel('Emotion')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b63b4c46-ab16-4a3a-bf1f-e1cd1095d567",
   "metadata": {},
   "outputs": [],
   "source": [
    "def custom_encoder(df):\n",
    "    # Map each emotion to 1 (positive) or 0 (negative)\n",
    "    df['class'] = df['Reaction'].map({\n",
    "        'surprise': 1,\n",
    "        'love': 1,\n",
    "        'joy': 1,\n",
    "        'fear': 0,\n",
    "        'anger': 0,\n",
    "        'sadness': 0\n",
    "    })\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bcc86f90-18c2-498c-b4cc-2d2fe264e37b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated file saved as 'total_updated.csv'\n"
     ]
    }
   ],
   "source": [
    "# Apply encoding to the total_df to add 'class' column\n",
    "total_df = custom_encoder(total_df)\n",
    "\n",
    "# Save the updated dataframe to total_updated.csv\n",
    "total_df.to_csv('total_updated.csv', index=False)\n",
    "\n",
    "print(\"Updated file saved as 'total_updated.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e56947ae-b68c-452d-8e8b-c54f1f8a9295",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i didnt feel humiliated</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i can go from feeling so hopeless to so damned...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>im grabbing a minute to post i feel greedy wrong</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i am ever feeling nostalgic about the fireplac...</td>\n",
       "      <td>love</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i am feeling grouchy</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17995</th>\n",
       "      <td>im having ssa examination tomorrow in the morn...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17996</th>\n",
       "      <td>i constantly worry about their fight against n...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17997</th>\n",
       "      <td>i feel its important to share this info for th...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17998</th>\n",
       "      <td>i truly feel that if you are passionate enough...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17999</th>\n",
       "      <td>i feel like i just wanna buy any cute make up ...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Text Reaction  class\n",
       "0                                i didnt feel humiliated  sadness      0\n",
       "1      i can go from feeling so hopeless to so damned...  sadness      0\n",
       "2       im grabbing a minute to post i feel greedy wrong    anger      0\n",
       "3      i am ever feeling nostalgic about the fireplac...     love      1\n",
       "4                                   i am feeling grouchy    anger      0\n",
       "...                                                  ...      ...    ...\n",
       "17995  im having ssa examination tomorrow in the morn...  sadness      0\n",
       "17996  i constantly worry about their fight against n...      joy      1\n",
       "17997  i feel its important to share this info for th...      joy      1\n",
       "17998  i truly feel that if you are passionate enough...      joy      1\n",
       "17999  i feel like i just wanna buy any cute make up ...      joy      1\n",
       "\n",
       "[18000 rows x 3 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9691ba8e-86e3-49b8-8dec-f85f075dee01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No missing values found in 'Reaction' or 'class' columns.\n"
     ]
    }
   ],
   "source": [
    "# Load the total_updated.csv file\n",
    "total_df = pd.read_csv('total_updated.csv')\n",
    "\n",
    "# Check for missing values in 'Reaction' or 'class' columns\n",
    "missing_values = total_df[total_df[['Reaction', 'class']].isnull().any(axis=1)]\n",
    "if not missing_values.empty:\n",
    "    print(\"Rows with missing values:\\n\", missing_values)\n",
    "else:\n",
    "    print(\"No missing values found in 'Reaction' or 'class' columns.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4dd5bbbc-0b8c-4422-a5e3-43b7f83c7e12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All values in 'class' column are as expected (0 or 1).\n"
     ]
    }
   ],
   "source": [
    "# Check for unexpected values in 'class' column (values other than 0 or 1)\n",
    "unexpected_class_values = total_df[~total_df['class'].isin([0, 1])]\n",
    "if not unexpected_class_values.empty:\n",
    "    print(\"Rows with unexpected 'class' values:\\n\", unexpected_class_values)\n",
    "else:\n",
    "    print(\"All values in 'class' column are as expected (0 or 1).\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dd6f021d-56a4-4125-b3e4-edd48d3741a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All reactions have been mapped correctly in 'class' column.\n"
     ]
    }
   ],
   "source": [
    "# Check if any 'Reaction' values are missing a mapped binary class\n",
    "unmapped_reactions = total_df[total_df['class'].isnull()]\n",
    "if not unmapped_reactions.empty:\n",
    "    print(\"Rows with unmapped reactions:\\n\", unmapped_reactions)\n",
    "else:\n",
    "    print(\"All reactions have been mapped correctly in 'class' column.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aaa8331d-c15a-41ba-b058-10f12b9ab243",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate text for positive and negative classes\n",
    "positive_text = ' '.join(total_df[total_df['class'] == 1]['Reaction'].dropna())\n",
    "negative_text = ' '.join(total_df[total_df['class'] == 0]['Reaction'].dropna())\n",
    "\n",
    "# Create word clouds\n",
    "positive_wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='Greens').generate(positive_text)\n",
    "negative_wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='Reds').generate(negative_text)\n",
    "\n",
    "# Display the word clouds\n",
    "plt.figure(figsize=(16, 8))\n",
    "\n",
    "# Positive class word cloud\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.imshow(positive_wordcloud, interpolation='bilinear')\n",
    "plt.title('Positive Class (class = 1)')\n",
    "plt.axis('off')\n",
    "\n",
    "# Negative class word cloud\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.imshow(negative_wordcloud, interpolation='bilinear')\n",
    "plt.title('Negative Class (class = 0)')\n",
    "plt.axis('off')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "47e3ae15-7970-4a02-b4ae-36f40d389028",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_df = pd.read_csv('total_updated.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "72108c3b-57bb-4496-a3a2-3ae2b4558d1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     C:\\Users\\Admin\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import nltk\n",
    "nltk.download('vader_lexicon')\n",
    "\n",
    "# Initialize the Sentiment Intensity Analyzer\n",
    "analyzer = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e62e2542-4340-4567-8211-6979caae0b2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new 'sentiment' column to fill with the compound score\n",
    "if 'sentiment' not in total_df.columns:\n",
    "    total_df.loc[:, 'sentiment'] = 0.0\n",
    "else:\n",
    "    total_df.loc[:, 'sentiment'] = 0.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1c65ba27-e3a6-470c-8085-f2edee53a2af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>class</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>sentiment_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i didnt feel humiliated</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i can go from feeling so hopeless to so damned...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>im grabbing a minute to post i feel greedy wrong</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i am ever feeling nostalgic about the fireplac...</td>\n",
       "      <td>love</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i am feeling grouchy</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17995</th>\n",
       "      <td>im having ssa examination tomorrow in the morn...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17996</th>\n",
       "      <td>i constantly worry about their fight against n...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17997</th>\n",
       "      <td>i feel its important to share this info for th...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17998</th>\n",
       "      <td>i truly feel that if you are passionate enough...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17999</th>\n",
       "      <td>i feel like i just wanna buy any cute make up ...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Text Reaction  class  \\\n",
       "0                                i didnt feel humiliated  sadness      0   \n",
       "1      i can go from feeling so hopeless to so damned...  sadness      0   \n",
       "2       im grabbing a minute to post i feel greedy wrong    anger      0   \n",
       "3      i am ever feeling nostalgic about the fireplac...     love      1   \n",
       "4                                   i am feeling grouchy    anger      0   \n",
       "...                                                  ...      ...    ...   \n",
       "17995  im having ssa examination tomorrow in the morn...  sadness      0   \n",
       "17996  i constantly worry about their fight against n...      joy      1   \n",
       "17997  i feel its important to share this info for th...      joy      1   \n",
       "17998  i truly feel that if you are passionate enough...      joy      1   \n",
       "17999  i feel like i just wanna buy any cute make up ...      joy      1   \n",
       "\n",
       "       sentiment sentiment_label  \n",
       "0            0.0        Positive  \n",
       "1            0.0        Positive  \n",
       "2            0.0        Negative  \n",
       "3            0.0        Positive  \n",
       "4            0.0        Negative  \n",
       "...          ...             ...  \n",
       "17995        0.0        Positive  \n",
       "17996        0.0        Positive  \n",
       "17997        0.0        Positive  \n",
       "17998        0.0        Positive  \n",
       "17999        0.0        Positive  \n",
       "\n",
       "[18000 rows x 5 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ac64cfcc-5c39-4728-a6dc-180232d50086",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initializing the counter for the while loop\n",
    "i = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "415d4a4a-60ea-4132-936c-c0fdec48333b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Looping through the tweets to perform the analysis\n",
    "for i in range(18000):\n",
    "    text = str(total_df.iloc[i]['Text'])\n",
    "    sentiment_score = analyzer.polarity_scores(text)['compound']\n",
    "    total_df.at[i, 'sentiment'] = sentiment_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "68d4eafd-93b0-4820-a9e9-2f262ee0702a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>class</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>sentiment_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i didnt feel humiliated</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.2584</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i can go from feeling so hopeless to so damned...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0821</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>im grabbing a minute to post i feel greedy wrong</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.6597</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i am ever feeling nostalgic about the fireplac...</td>\n",
       "      <td>love</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1280</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i am feeling grouchy</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.3400</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17995</th>\n",
       "      <td>im having ssa examination tomorrow in the morn...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5047</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17996</th>\n",
       "      <td>i constantly worry about their fight against n...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.3919</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17997</th>\n",
       "      <td>i feel its important to share this info for th...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.4588</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17998</th>\n",
       "      <td>i truly feel that if you are passionate enough...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17999</th>\n",
       "      <td>i feel like i just wanna buy any cute make up ...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Text Reaction  class  \\\n",
       "0                                i didnt feel humiliated  sadness      0   \n",
       "1      i can go from feeling so hopeless to so damned...  sadness      0   \n",
       "2       im grabbing a minute to post i feel greedy wrong    anger      0   \n",
       "3      i am ever feeling nostalgic about the fireplac...     love      1   \n",
       "4                                   i am feeling grouchy    anger      0   \n",
       "...                                                  ...      ...    ...   \n",
       "17995  im having ssa examination tomorrow in the morn...  sadness      0   \n",
       "17996  i constantly worry about their fight against n...      joy      1   \n",
       "17997  i feel its important to share this info for th...      joy      1   \n",
       "17998  i truly feel that if you are passionate enough...      joy      1   \n",
       "17999  i feel like i just wanna buy any cute make up ...      joy      1   \n",
       "\n",
       "       sentiment sentiment_label  \n",
       "0         0.2584        Positive  \n",
       "1         0.0821        Positive  \n",
       "2        -0.6597        Negative  \n",
       "3         0.1280        Positive  \n",
       "4        -0.3400        Negative  \n",
       "...          ...             ...  \n",
       "17995     0.5047        Positive  \n",
       "17996     0.3919        Positive  \n",
       "17997     0.4588        Positive  \n",
       "17998     0.9062        Positive  \n",
       "17999     0.6705        Positive  \n",
       "\n",
       "[18000 rows x 5 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e501363d-2709-4f93-a7a8-142058fc8db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now is time to convert the sentiment scores into categorical labels\n",
    "def label_sentiment(score):\n",
    "    if score > 0:\n",
    "        return 'Positive'\n",
    "    elif score < 0:\n",
    "        return 'Negative'\n",
    "    else:\n",
    "        return 'Neutral'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "271a62b3-fd93-4bf9-bf0e-44140363dc0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>class</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>sentiment_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i didnt feel humiliated</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.2584</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i can go from feeling so hopeless to so damned...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0821</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>im grabbing a minute to post i feel greedy wrong</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.6597</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i am ever feeling nostalgic about the fireplac...</td>\n",
       "      <td>love</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1280</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i am feeling grouchy</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.3400</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17995</th>\n",
       "      <td>im having ssa examination tomorrow in the morn...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5047</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17996</th>\n",
       "      <td>i constantly worry about their fight against n...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.3919</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17997</th>\n",
       "      <td>i feel its important to share this info for th...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.4588</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17998</th>\n",
       "      <td>i truly feel that if you are passionate enough...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17999</th>\n",
       "      <td>i feel like i just wanna buy any cute make up ...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Text Reaction  class  \\\n",
       "0                                i didnt feel humiliated  sadness      0   \n",
       "1      i can go from feeling so hopeless to so damned...  sadness      0   \n",
       "2       im grabbing a minute to post i feel greedy wrong    anger      0   \n",
       "3      i am ever feeling nostalgic about the fireplac...     love      1   \n",
       "4                                   i am feeling grouchy    anger      0   \n",
       "...                                                  ...      ...    ...   \n",
       "17995  im having ssa examination tomorrow in the morn...  sadness      0   \n",
       "17996  i constantly worry about their fight against n...      joy      1   \n",
       "17997  i feel its important to share this info for th...      joy      1   \n",
       "17998  i truly feel that if you are passionate enough...      joy      1   \n",
       "17999  i feel like i just wanna buy any cute make up ...      joy      1   \n",
       "\n",
       "       sentiment sentiment_label  \n",
       "0         0.2584        Positive  \n",
       "1         0.0821        Positive  \n",
       "2        -0.6597        Negative  \n",
       "3         0.1280        Positive  \n",
       "4        -0.3400        Negative  \n",
       "...          ...             ...  \n",
       "17995     0.5047        Positive  \n",
       "17996     0.3919        Positive  \n",
       "17997     0.4588        Positive  \n",
       "17998     0.9062        Positive  \n",
       "17999     0.6705        Positive  \n",
       "\n",
       "[18000 rows x 5 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_df['sentiment_label'] = total_df['sentiment'].apply(label_sentiment)\n",
    "total_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "00687b56-a281-4d60-bd61-fa0c69b4a9dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated file saved as 'total_updated.csv'\n"
     ]
    }
   ],
   "source": [
    "# Save the updated dataframe to total_updated.csv\n",
    "total_df.to_csv('total_updated.csv', index=False)\n",
    "\n",
    "print(\"Updated file saved as 'total_updated.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "54c1327f-840d-4c43-a87e-a9a595a546f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "C:\\Python311\\Lib\\site-packages\\seaborn\\_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sentiment_counts = total_df['sentiment_label'].value_counts()\n",
    "\n",
    "# Creating a bar plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, palette=\"viridis\")\n",
    "\n",
    "plt.title('Distribution of Emotion Labels Based on Sentiment Score')\n",
    "plt.xlabel('Emotion')\n",
    "plt.ylabel('Count')\n",
    "\n",
    "plt.xticks(fontsize=12)\n",
    "plt.yticks(fontsize=12)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "4b65336d-fa34-4ed1-a90f-5299c555175b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "## SVM USING TF-IDF VECTORIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "960a8d8b-3c2a-4635-ae74-99b3779259be",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "12fd3c5a-180c-4c1f-b611-0a62b3d17fe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('total_updated.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "99b98c3c-2304-471f-8fad-06578125c9ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>class</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>sentiment_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>i didnt feel humiliated</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.2584</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>i can go from feeling so hopeless to so damned...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0821</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>im grabbing a minute to post i feel greedy wrong</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.6597</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>i am ever feeling nostalgic about the fireplac...</td>\n",
       "      <td>love</td>\n",
       "      <td>1</td>\n",
       "      <td>0.1280</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>i am feeling grouchy</td>\n",
       "      <td>anger</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.3400</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17995</th>\n",
       "      <td>im having ssa examination tomorrow in the morn...</td>\n",
       "      <td>sadness</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5047</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17996</th>\n",
       "      <td>i constantly worry about their fight against n...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.3919</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17997</th>\n",
       "      <td>i feel its important to share this info for th...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.4588</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17998</th>\n",
       "      <td>i truly feel that if you are passionate enough...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17999</th>\n",
       "      <td>i feel like i just wanna buy any cute make up ...</td>\n",
       "      <td>joy</td>\n",
       "      <td>1</td>\n",
       "      <td>0.6705</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    Text Reaction  class  \\\n",
       "0                                i didnt feel humiliated  sadness      0   \n",
       "1      i can go from feeling so hopeless to so damned...  sadness      0   \n",
       "2       im grabbing a minute to post i feel greedy wrong    anger      0   \n",
       "3      i am ever feeling nostalgic about the fireplac...     love      1   \n",
       "4                                   i am feeling grouchy    anger      0   \n",
       "...                                                  ...      ...    ...   \n",
       "17995  im having ssa examination tomorrow in the morn...  sadness      0   \n",
       "17996  i constantly worry about their fight against n...      joy      1   \n",
       "17997  i feel its important to share this info for th...      joy      1   \n",
       "17998  i truly feel that if you are passionate enough...      joy      1   \n",
       "17999  i feel like i just wanna buy any cute make up ...      joy      1   \n",
       "\n",
       "       sentiment sentiment_label  \n",
       "0         0.2584        Positive  \n",
       "1         0.0821        Positive  \n",
       "2        -0.6597        Negative  \n",
       "3         0.1280        Positive  \n",
       "4        -0.3400        Negative  \n",
       "...          ...             ...  \n",
       "17995     0.5047        Positive  \n",
       "17996     0.3919        Positive  \n",
       "17997     0.4588        Positive  \n",
       "17998     0.9062        Positive  \n",
       "17999     0.6705        Positive  \n",
       "\n",
       "[18000 rows x 5 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9e3e42b0-3c76-4618-9c87-33c050371048",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define features and labels\n",
    "X = data['Text']  # Input text data\n",
    "y = data['sentiment_label']  # Sentiment labels: Positive, Negative, Neutral"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0fd43375-3930-420c-8354-513d4d09fa47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Convert text data to TF-IDF features\n",
    "tfidf = TfidfVectorizer(max_features=5000)  # Adjust max_features based on dataset size\n",
    "X_train_tfidf = tfidf.fit_transform(X_train)\n",
    "X_test_tfidf = tfidf.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "781ae2e1-2886-47a8-898e-3ba2eafbd2e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize and train the SVM model\n",
    "svm_model = SVC(kernel='linear')  # Linear kernel works well for text classification\n",
    "svm_model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = svm_model.predict(X_test_tfidf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "0d31b377-b495-4ab2-ada8-0760b4268d15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Negative       0.86      0.85      0.86      1650\n",
      "     Neutral       0.75      0.09      0.16        67\n",
      "    Positive       0.86      0.89      0.87      1883\n",
      "\n",
      "    accuracy                           0.86      3600\n",
      "   macro avg       0.82      0.61      0.63      3600\n",
      "weighted avg       0.86      0.86      0.85      3600\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1407    2  241]\n",
      " [  20    6   41]\n",
      " [ 208    0 1675]]\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0df7bb98-143f-482d-b4a8-ded1b188e6a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a text to analyze sentiment (or type 'exit' to quit):  This product exceeded my expectations and works wonderfully\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Sentiment: Positive\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a text to analyze sentiment (or type 'exit' to quit):  I received a defective item, and the customer service was unhelpful.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Sentiment: Negative\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a text to analyze sentiment (or type 'exit' to quit):  The product is okay, but I've seen better quality elsewhere.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Sentiment: Positive\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a text to analyze sentiment (or type 'exit' to quit):  I would never recommend this item; it broke after a week!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Sentiment: Negative\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a text to analyze sentiment (or type 'exit' to quit):  exit\n"
     ]
    }
   ],
   "source": [
    "# Function to predict sentiment from user input\n",
    "def predict_sentiment(user_text):\n",
    "    # Preprocess and transform user text using TF-IDF vectorizer\n",
    "    user_text_tfidf = tfidf.transform([user_text])  # Transform input text using the fitted TF-IDF vectorizer\n",
    "    prediction = svm_model.predict(user_text_tfidf)  # Predict using the trained SVM model\n",
    "    \n",
    "    return prediction[0]  # Return the predicted sentiment label\n",
    "\n",
    "# Loop to continuously take user input for testing\n",
    "while True:\n",
    "    user_text = input(\"Enter a text to analyze sentiment (or type 'exit' to quit): \")\n",
    "    if user_text.lower() == 'exit':\n",
    "        break\n",
    "    sentiment = predict_sentiment(user_text)\n",
    "    print(\"Predicted Sentiment:\", sentiment)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72ef2349-93b7-417e-b45d-18f366d1c5c4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
